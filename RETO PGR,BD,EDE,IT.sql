CREATE DATABASE MEDIAMARTA;
USE MEDIAMARTA;

CREATE TABLE USER (
    CODUSER VARCHAR(20) PRIMARY KEY,
    USERNAME VARCHAR(30),
    PSW VARCHAR(15),
    TYPE_U ENUM('Client', 'Admin' )
);

CREATE TABLE BRAND (
    CODBRAND INT AUTO_INCREMENT PRIMARY KEY,
    NAMEBRAND VARCHAR(15)
);

CREATE TABLE PRODUCT (
    CODPRODUCT INT AUTO_INCREMENT PRIMARY KEY,
    NAMEP VARCHAR(50),
    TYPEP ENUM('Mobile', 'Computer'),
    PRICE DOUBLE,
    STOCKPRODUCT INT,
    CODBRAND INT,
    FOREIGN KEY (CODBRAND)
        REFERENCES BRAND (CODBRAND)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE PURCHASE (
    CODPURCHASE INT AUTO_INCREMENT PRIMARY KEY,
    CODPRODUCT INT,
    CODUSER VARCHAR(20),
    QUANTITY INT,
    TOTALPRICE DOUBLE,
    DATEP DATE,
    FOREIGN KEY (CODPRODUCT)
        REFERENCES PRODUCT (CODPRODUCT)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (CODUSER)
        REFERENCES USER (CODUSER)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE COMPONENT (
    CODCOMPONENT INT AUTO_INCREMENT PRIMARY KEY,
    NAMECOMP VARCHAR(50),
    TYPEC ENUM('Graphics', 'RAM', 'Processor'),
    CODBRAND INT,
    STOCKCOMPONENT INT,
    PRICECOMP DOUBLE,
    FOREIGN KEY (CODBRAND)
        REFERENCES BRAND (CODBRAND)
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE BUY (
    CODBUY INT AUTO_INCREMENT PRIMARY KEY,
    CODCOMPONENT INT,
    CODUSER VARCHAR(20),
    QUANTITY INT,
    TOTALPRICE DOUBLE,
    DATEB DATE,
    FOREIGN KEY (CODCOMPONENT)
        REFERENCES COMPONENT (CODCOMPONENT)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (CODUSER)
        REFERENCES USER (CODUSER)
        ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO USER VALUES 
("Pakete7","Paco","1234","Client"),
("Jago128","Jagoba","4321","Admin"),
("BoliBick","Victor","4321","Admin"),
("Xabitxu","Xabi","4321","Admin"),
("Mineralex","Alex","4321","Admin"),
("PepGuardiola","Pepe","1234","Client"),
("Joao10","Felix","1234","Client"),
("","Test User","","Client"); -- User for tests
      
INSERT INTO BRAND (NAMEBRAND) VALUES 
("Apple"), -- AutoincrementCode: 1
("Samsung"), -- AutoincrementCode: 2
("Lenovo"), -- AutoincrementCode: 3
("Huawei"), -- AutoincrementCode: 4
("ASUS"), -- AutoincrementCode: 5
("INTEL"); -- AutoincrementCode: 6
    
INSERT INTO PRODUCT (NAMEP,TYPEP,PRICE,STOCKPRODUCT,CODBRAND) VALUES
("Iphone X","Mobile",500,150,1), -- Apple
("Samsung Galaxy Book 4","Computer",200,70,2), -- Samsung
("Lenovo IdeaPad Slim 3","Computer",700,25,3), -- Lenovo
("Samsung Galaxy S24","Mobile",550,5,2), -- Samsung
("ASUS ExpertBook","Computer",710,50,5), -- ASUS
("HUAWEI Pura 70 Pro","Mobile",1000,700,4), -- Huawei
("Intel Pro","Mobile",105,215,6); -- Intel

INSERT INTO PURCHASE (CODPRODUCT,CODUSER,QUANTITY,TOTALPRICE,DATEP) VALUES
(6,'Pakete7',5, 5000,'2025-02-20'),
(1,'PepGuardiola',12, 6000,'2025-01-04'),
(3,'Joao10',1, 700,'2025-03-03'),
(4,'Pakete7',2, 1100,'2025-02-25');

INSERT INTO COMPONENT (NAMECOMP,TYPEC,CODBRAND,STOCKCOMPONENT,PRICECOMP) VALUES 
("Asus GT710","Graphics",5,5,81.99), -- ASUS
("Intel Core i5-13400","Processor",6,15,170), -- Intel
("ESC 4000 G4X","RAM",3,60,110.99), -- Lenovo
("OFFTEK 8GB","RAM",4,95,30), -- Huawei
("ASUS Dual RTX 4060 TI","Graphics",5,45,81.99), -- ASUS
("Ultra 9 285K","Processor",6,15,665); -- INTEL

INSERT INTO BUY (CODCOMPONENT,CODUSER,QUANTITY,TOTALPRICE,DATEB) VALUES
(5,'Xabitxu',5, 409.95,'2025-02-20'),
(4,'Jago128',2, 60,'2025-01-04'),
(1,'BoliBick',1, 81.99,'2025-03-03'),
(2,'PepGuardiola',9, 1530,'2025-02-25');

DELIMITER //
CREATE PROCEDURE signIn(CODUSER VARCHAR(20), USERNAME VARCHAR(30), PSW VARCHAR(15))
BEGIN
	INSERT INTO USER (CODUSER, USERNAME, PSW, TYPE_U) VALUES(CODUSER, USERNAME, PSW, "Client");
    SELECT 'The user was added.' AS Message;
END //
DELIMITER ;

DELIMITER //    
CREATE PROCEDURE insertProduct(NAMEP VARCHAR(50), TYPEP ENUM ("Mobile","Computer"), PRICE DOUBLE, STOCKPRODUCT INT, CODBRAND INT)
BEGIN
INSERT INTO PRODUCT (NAMEP,TYPEP,PRICE,STOCKPRODUCT,CODBRAND) VALUES
(NAMEP,TYPEP,PRICE,STOCKPRODUCT,CODBRAND);
SELECT 'The product was added.' AS Message;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE showProducts()
BEGIN
	DECLARE END BOOLEAN DEFAULT FALSE;
    DECLARE NAME VARCHAR(50);
    DECLARE TypeP ENUM ("Mobile","Computer");
    DECLARE PRICE DOUBLE;
    DECLARE STOCK INT;
    DECLARE CODBRAND INT;
    DECLARE C CURSOR FOR SELECT NAMEP,TYPEP,PRICE,STOCKPRODUCT,CODBRAND FROM PRODUCT;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET END = TRUE;
    
    OPEN C;
	FETCH C INTO NAME,TypeP,PRICE,STOCK,CODBRAND;
	WHILE NOT END DO
		SELECT CONCAT ('Name: ', NAME, ' Type: ', TypeP,' Price: ', PRICE,' Stock: ', STOCK,' CodeBrand: ', CODBRAND) AS "Order data"; 
		FETCH C INTO NAME,TypeP,PRICE,STOCK,CODBRAND;
    END WHILE;
    CLOSE C; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteProduct(NAME VARCHAR(50))
BEGIN
	DECLARE CODE INT;
    DECLARE FOUND BOOLEAN DEFAULT TRUE;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FOUND = FALSE;
    
	SELECT CODPRODUCT INTO CODE FROM PRODUCT WHERE NAMEP = NAME;

    IF NOT FOUND THEN
		SELECT CONCAT('The product ', NAME,' could not be found.') AS DELETE_PRODUCT;
    ELSE 
		SELECT CONCAT('The product ', NAME,' has been deleted correctly.') AS DELETE_PRODUCT;
		DELETE FROM PRODUCT WHERE CODPRODUCT = CODE;
    END IF;        
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION getTotalValueOfAProduct(NAME VARCHAR(50))
RETURNS INT
DETERMINISTIC
BEGIN 
	DECLARE TOTALVALUE INT DEFAULT 0;
    
    SELECT STOCKPRODUCT * PRICE INTO TOTALVALUE FROM PRODUCT WHERE NAMEP = NAME;
    RETURN TOTALVALUE;
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION getStockOfAProduct(NAME VARCHAR(50))
RETURNS INT
DETERMINISTIC
BEGIN 
	DECLARE STOCK INT DEFAULT 0;
    
    SELECT STOCKPRODUCT INTO STOCK FROM PRODUCT WHERE NAMEP = NAME;
    RETURN STOCK;
END //
DELIMITER ;

DELIMITER //    
CREATE PROCEDURE insertComponent(NAMECOMP VARCHAR(50), TYPEC ENUM("Graphics","RAM","Processor"), CODBRAND INT, STOCKCOMPONENT INT,PRICECOMP DOUBLE)
BEGIN
INSERT INTO PRODUCT (NAMECOMP,TYPEC,CODBRAND, STOCKCOMPONENT, PRICECOMP) VALUES
(NAMECOMP,TYPEC,CODBRAND, STOCKCOMPONENT, PRICECOMP);
SELECT 'The component was added.' AS Message;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE showComponents()
BEGIN
	DECLARE END BOOLEAN DEFAULT FALSE;
    DECLARE NAME VARCHAR(50);
    DECLARE TypeC ENUM ("Mobile","Computer");
    DECLARE CODBRAND INT;
    DECLARE STOCK INT;
    DECLARE PRICE DOUBLE;
    DECLARE C CURSOR FOR SELECT NAMECOMP,TYPEC,CODBRAND,STOCKCOMPONENT,PRICECOMP FROM COMPONENT;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET END = TRUE;
    
    OPEN C;
	FETCH C INTO NAME,TypeC,CODBRAND,STOCK,PRICE; 
	WHILE NOT END DO
		SELECT CONCAT ('Name: ', NAME, ' Type: ', TypeC,' CodeBrand: ', CODBRAND,' Stock: ', STOCK,' Price: ', PRICE) AS "Order data";
		FETCH C INTO NAME,TypeC,CODBRAND,STOCK,PRICE; 
    END WHILE; 
    CLOSE C; 
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE deleteComp(NAME VARCHAR(50))
BEGIN
	DECLARE CODE INT;
    DECLARE FOUND BOOLEAN DEFAULT TRUE;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET FOUND = FALSE;
    
	SELECT CODCOMPONENT INTO CODE FROM COMPONENT WHERE NAMECOMP = NAME;

    IF NOT FOUND THEN
		SELECT CONCAT('The component ', NAME,' could not be found.') AS DELETE_PRODUCT;
    ELSE 
		SELECT CONCAT('The component ', NAME,' has been deleted correctly.') AS DELETE_PRODUCT;
		DELETE FROM COMPONENT WHERE CODCOMPONENT = CODE;
    END IF;        
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sellAndSubstract(CODUSER VARCHAR(20), NAME_I VARCHAR(50), AMOUNT INT, PRICE DOUBLE, PROD BOOLEAN)
	BEGIN
		DECLARE STOCK INT;
		DECLARE STOCKCHECK INT;
		DECLARE CODE INT;
		DECLARE CURRENTDATE DATE;
		DECLARE TOTALPRICE DOUBLE;
		
		SET STOCK:=(SELECT callSellAndSubstract(NAME_I, AMOUNT, PROD));
		IF PROD THEN
			SET CODE:=(SELECT CODPRODUCT FROM PRODUCT WHERE NAMEP = NAME_I LIMIT 1);
			SET STOCKCHECK:=(SELECT STOCKPRODUCT FROM PRODUCT WHERE CODPRODUCT = CODE);
			IF STOCKCHECK=STOCK THEN
				SELECT "You cannot buy more products than the amount of stock available.";
			ELSE
				UPDATE PRODUCT SET STOCKPRODUCT = STOCK WHERE CODPRODUCT = CODE;
				SET CURRENTDATE = CURDATE();
				INSERT INTO PURCHASE (CODPRODUCT,CODUSER,QUANTITY,TOTALPRICE,DATEP) VALUES
				(CODE, CODUSER, AMOUNT, PRICE, CURRENTDATE);
			END IF;
		ELSE
			SET CODE:=(SELECT CODCOMPONENT FROM COMPONENT WHERE NAMECOMP = NAME_I LIMIT 1);
			SET STOCKCHECK:=(SELECT STOCKCOMPONENT FROM COMPONENT WHERE CODCOMPONENT = CODE);
			IF STOCKCHECK=STOCK THEN
				SELECT "You cannot buy more products than the amount of stock available.";
			ELSE
				UPDATE COMPONENT SET STOCKCOMPONENT = STOCK WHERE CODCOMPONENT = CODE;
                SET CURRENTDATE = CURDATE();
				INSERT INTO BUY (CODCOMPONENT,CODUSER,QUANTITY,TOTALPRICE,DATEB) VALUES
				(CODE, CODUSER, AMOUNT, PRICE, CURRENTDATE);
			END IF;
	END IF;
END //

DELIMITER ;

DELIMITER //
CREATE FUNCTION callSellAndSubstract(NAME_I VARCHAR(50), AMOUNT INT, PROD BOOLEAN) RETURNS INT
READS SQL DATA
BEGIN
    DECLARE CURRENTSTOCK INT DEFAULT 0;
    DECLARE STOCKCHECK INT DEFAULT 0;
    DECLARE CODE INT;
    DECLARE ERROR BOOLEAN DEFAULT FALSE;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET ERROR = TRUE;
    
    IF PROD THEN
        SET CODE:=(SELECT CODPRODUCT FROM PRODUCT WHERE NAMEP = NAME_I LIMIT 1);
        IF CODE IS NULL THEN
            SET ERROR = TRUE;
        END IF;

        IF ERROR = FALSE THEN
            SET STOCKCHECK:=(SELECT STOCKPRODUCT FROM PRODUCT WHERE CODPRODUCT = CODE);
            SET CURRENTSTOCK:=STOCKCHECK - AMOUNT;
            IF CURRENTSTOCK < 0 THEN
                SET ERROR = TRUE;
            END IF;
        END IF;
    ELSE
        SET CODE:=(SELECT CODCOMPONENT FROM COMPONENT WHERE NAMECOMP = NAME_I LIMIT 1);
        IF CODE IS NULL THEN
            SET ERROR = TRUE;
        END IF;

        IF ERROR = FALSE THEN
            SET STOCKCHECK:=(SELECT STOCKCOMPONENT FROM COMPONENT WHERE CODCOMPONENT = CODE);
            SET CURRENTSTOCK:=STOCKCHECK - AMOUNT;
            
            IF CURRENTSTOCK < 0 THEN
                SET ERROR = TRUE;
            END IF;
        END IF;
    END IF;
    
    IF ERROR = TRUE THEN
		SET CURRENTSTOCK=STOCKCHECK;
    END IF;
    RETURN CURRENTSTOCK;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE showLowStock()  
BEGIN
    DECLARE END BOOLEAN DEFAULT FALSE;
    DECLARE CODEP INT;
    DECLARE NAMEP VARCHAR(50);
    DECLARE STOCKP INT;
    DECLARE CODEC INT;
    DECLARE NAMEC VARCHAR(50);
    DECLARE STOCKC INT;
    DECLARE C CURSOR FOR (SELECT P.CODPRODUCT, P.NAMEP, P.STOCKPRODUCT FROM PRODUCT P ORDER BY STOCKPRODUCT);
    DECLARE C2 CURSOR FOR SELECT C.CODCOMPONENT, C.NAMECOMP, C.STOCKCOMPONENT FROM COMPONENT C ORDER BY STOCKCOMPONENT;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET END = TRUE;
    
    OPEN C;
		SET END = FALSE;
        FETCH C INTO CODEP, NAMEP, STOCKP;
		WHILE END = FALSE DO
			IF (StockP <= 5) THEN
				SELECT CONCAT('Code: ', CODEP,' Product: ', NAMEP,' Stock: ', STOCKP) AS PRODUCTS;
			END IF;
            FETCH C INTO CODEP, NAMEP, STOCKP;
		END WHILE;
    CLOSE C;
    
    OPEN C2;
		SET END = FALSE;
		FETCH C2 INTO CODEC, NAMEC, STOCKC;
		WHILE END = FALSE DO
			IF (StockC <= 5) THEN
				SELECT CONCAT('Code: ', CODEC,' Component: ', NAMEC,' Stock: ', STOCKC) AS COMPONENTS;
			END IF;
            FETCH C2 INTO CODEC, NAMEC, STOCKC;
		END WHILE;
    CLOSE C2;
END //
DELIMITER ;

DELIMITER //
CREATE FUNCTION getPrice(NAME VARCHAR(50)) RETURNS DOUBLE
READS SQL DATA
BEGIN
	DECLARE PRICE DOUBLE DEFAULT 0;
    
	SELECT PRICECOMP INTO PRICE FROM COMPONENT WHERE NAMECOMP = NAME;
    RETURN PRICE;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE showProdsAndCompsOfAParticularBrand(NAMEB VARCHAR(15))
BEGIN
    DECLARE END BOOLEAN DEFAULT FALSE;
    DECLARE NAMEP VARCHAR(50);
    DECLARE TypeP ENUM('Mobile', 'Computer');
    DECLARE PRICEP DOUBLE;
    DECLARE STOCKP INT;
	DECLARE FOUND INT DEFAULT 0;
    
    DECLARE NAMEC VARCHAR(50);
    DECLARE TypeC ENUM('Graphics', 'RAM', 'Processor');
    DECLARE PRICEC DOUBLE;
    DECLARE STOCKC INT;

    DECLARE C CURSOR FOR SELECT P.NAMEP, P.TYPEP, P.PRICE, P.STOCKPRODUCT FROM PRODUCT P JOIN BRAND B ON P.CODBRAND = B.CODBRAND WHERE B.NAMEBRAND = NAMEB;
    DECLARE C2 CURSOR FOR SELECT C.NAMECOMP, C.TYPEC, C.PRICECOMP, C.STOCKCOMPONENT FROM COMPONENT C JOIN BRAND B ON C.CODBRAND = B.CODBRAND WHERE B.NAMEBRAND = NAMEB;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET END = TRUE;
    
    SELECT COUNT(*) INTO FOUND FROM BRAND WHERE NAMEBRAND = NAMEB;
    IF FOUND = FALSE THEN
        SELECT CONCAT('No items were found for brand: ', NAMEB) AS Message;
	ELSE
    
    OPEN C;
    FETCH C INTO NAMEP, TypeP, PRICEP, STOCKP;
    WHILE NOT END DO
        SELECT CONCAT('Brand: ', NAMEB, ' | Product: ', NAMEP, ' | Type: ', TypeP, ' | Price: ', PRICEP, ' | Stock: ', STOCKP) AS Product_Info;
        FETCH C INTO NAMEP, TypeP, PRICEP, STOCKP;
    END WHILE;
    CLOSE C;
    
	SET END = FALSE;
    OPEN C2;
    FETCH C2 INTO NAMEC, TypeC, PRICEC, STOCKC;
    WHILE NOT END DO
        SELECT CONCAT('Brand: ', NAMEB, ' | Component: ', NAMEC, ' | Type: ', TypeC, ' | Price: ', PRICEC, ' | Stock: ', STOCKC) AS Component_Info;
        FETCH C2 INTO NAMEC, TypeC, PRICEC, STOCKC;
    END WHILE;
    CLOSE C2;
    END IF;
END //
DELIMITER ;